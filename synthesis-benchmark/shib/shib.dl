
// Parameters
.decl *totalSupply(n: uint)
.decl balanceOf(p: address, n: uint)[0]
.decl constructor()

// Transactions
.decl mint(p: address, amount: uint)
.decl burn(p: address, amount: uint)
.decl transfer(from: address, to: address, amount: uint)
.decl transferFrom(from: address, to: address, spender: address, amount: uint)
.decl burnFrom(p: address, from: address, amount: uint)

// Rules
totalSupply(0) :- constructor().

mint(p, n) :- mint(p, n).
burn(p, n) :- burn(p, n).
transfer(s, r, n) :- transfer(s, r, n).

burnFrom(s, p, n) :- burnFrom(s, p, n).
transferFrom(s, p, 0, n) :- burnFrom(s, p, n).
burn(p, n) :- burnFrom(_, p, n).

// Token balance calculations
.decl totalMint(p: address, n: uint)[0]
.decl totalBurn(p: address, n: uint)[0]
.decl totalOut(p: address, n: uint)[0]
.decl totalIn(p: address, n: uint)[0]

totalOut(p, s) :- transfer(p, _, _), s = sum n: transfer(p, _, n).
totalIn(p, s) :- transfer(_, p, _), s = sum n: transfer(_, p, n).
totalMint(p, s) :- mint(p, _), s = sum n: mint(p, n).
totalBurn(p, s) :- burn(p, _), s = sum n: burn(p, n).
balanceOf(p, s) :- totalMint(p, n), totalBurn(p, m), totalOut(p, o), totalIn(p, i), s := n + i - m - o.

.decl *allMint(n: uint)
.decl *allBurn(n: uint)
allMint(s) :- s = sum n: mint(_, n).
allBurn(s) :- s = sum n: burn(_, n).
totalSupply(n) :- allMint(m), allBurn(b), n := m - b.
