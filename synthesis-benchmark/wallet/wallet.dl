
// Parameters
.decl *owner(p: address)
.decl *totalSupply(n: int)
.decl balanceOf(p: address, n: int)[0]
.decl constructor()

// Transactions
.decl mint(p: address, amount: int)
.decl burn(p: address, amount: int)
.decl transfer(from: address, to: address, amount: int)

// Rules
owner(s) :- constructor().

mint(p, n) :- mint(p, n).
burn(p, n) :- burn(p, n).
transfer(s, r, n) :- transfer(s, r, n).

// Token flow logic
.decl totalOut(p: address, n: int)[0]
.decl totalIn(p: address, n: int)[0]
transfer(0, p, n) :- mint(p, n).
transfer(p, 0, n) :- burn(p, n).
totalOut(p, s) :- transfer(p, _, _), s = sum n: transfer(p, _, n).
totalIn(p, s) :- transfer(_, p, _), s = sum n: transfer(_, p, n).
balanceOf(p, s) :- totalOut(p, o), totalIn(p, i), s := i - o.

.decl *allMint(n: int)
.decl *allBurn(n: int)
allMint(s) :- s = sum n: mint(_, n).
allBurn(s) :- s = sum n: burn(_, n).
totalSupply(n) :- allMint(m), allBurn(b), n := m - b.
