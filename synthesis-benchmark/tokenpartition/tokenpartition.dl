
// Parameters
.decl *totalSupply(n: uint)
.decl totalSupplyByPartition(q: uint, n: uint)[0]
.decl balanceOfByPartition(p: address, q: uint, n: uint)[0,1]
.decl constructor()

// Transactions
.decl issueByPartition(p: address, q: uint, amount: uint)
.decl redeemByPartition(p: address, q: uint, amount: uint)
.decl transferByPartition(from: address, to: address, q: uint, amount: uint)

// Rules
totalSupply(0) :- constructor().

issueByPartition(p, q, n) :- issueByPartition(p, q, n).
redeemByPartition(p, q, n) :- redeemByPartition(p, q, n).
transferByPartition(s, r, q, n) :- transferByPartition(s, r, q, n).

// Token flow logic
.decl totalOut(p: address, q: uint, n: uint)[0,1]
.decl totalIn(p: address, q: uint, n: uint)[0,1]
.decl totalMint(p: address, q: uint, n: uint)[0,1]
.decl totalBurn(p: address, q: uint, n: uint)[0,1]

totalOut(p, q, s) :- transferByPartition(p, _, q, _), s = sum n: transferByPartition(p, _, q, n).
totalIn(p, q, s) :- transferByPartition(_, p, q, _), s = sum n: transferByPartition(_, p, q, n).
totalMint(p, q, s) :- issueByPartition(p, q, _), s = sum n: issueByPartition(p, q, n).
totalBurn(p, q, s) :- redeemByPartition(p, q, _), s = sum n: redeemByPartition(p, q, n).
balanceOfByPartition(p, q, s) :- totalMint(p, q, n), totalBurn(p, q, m),
                                totalOut(p, q, o), totalIn(p, q, i), s := n + i - m - o.

.decl *allMint(n: uint)
.decl *allBurn(n: uint)
allMint(s) :- s = sum n: issueByPartition(_, _, n).
allBurn(s) :- s = sum n: redeemByPartition(_, _, n).
totalSupply(n) :- allMint(m), allBurn(b), n := m - b.

.decl issueTotalByPartition(q: uint, n: uint)[0]
.decl redeemTotalByPartition(q: uint, n: uint)[0]

issueTotalByPartition(q, s) :- issueByPartition(_, q, _), s = sum n: issueByPartition(_, q, n).
redeemTotalByPartition(q, s) :- redeemByPartition(_, q, _), s = sum n: redeemByPartition(_, q, n).
totalSupplyByPartition(q, n) :- issueTotalByPartition(q, i),
                                redeemTotalByPartition(q, r), n := i - r.
